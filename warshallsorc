#include <iostream>
#include <vector>
using namespace std;

void calculatePaths(const vector<vector<int>>& graph, vector<vector<int>>& result, int length) {
    int n = graph.size();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                if (graph[i][k] && result[k][j] && length > 1) {
                    result[i][j] = 1;
                }
                else if (graph[i][j] && length == 1) {
                    result[i][j] = 1;
                }
            }
        }
    }
}

void printGraph(const vector<vector<int>>& graph) {
    for (const auto& row : graph) {
        for (int val : row) {
            cout << val << " ";
        }
        cout << endl;
    }
}

int main() {
    int n;
    cout << "Enter the number of vertices: ";
    cin >> n;

    vector<vector<int>> graph(n, vector<int>(n));
    cout << "Enter the adjacency matrix (0 or 1):\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> graph[i][j];
        }
    }

    int maxLength;
    cout << "Enter the maximum path length: ";
    cin >> maxLength;

    for (int length = 1; length <= maxLength; length++) {
        vector<vector<int>> result(n, vector<int>(n, 0));
        calculatePaths(graph, result, length);
        cout << "Paths matrix with length " << length << ":\n";
        printGraph(result);
        cout << endl;
    }

    return 0;
}
